// Copyright (c) Bili Copilot. All rights reserved.
// <auto-generated />

using System.Reflection;
using System.Threading;
using Silk.NET.Core.Native;
using Silk.NET.Direct3D11;
using Silk.NET.DXGI;
using Silk.NET.OpenGL;
using Silk.NET.WGL.Extensions.NV;
using Silk.NET.Windowing;

namespace BiliCopilot.UI.Controls.Core.Common;
#pragma warning disable CS1591 // 缺少对公共可见类型或成员的 XML 注释
#pragma warning disable SA1600 // 缺少对公共可见类型或成员的 XML 注释

public unsafe class RenderContext
{
    private static ContextSettings _sharedContextSettings;
    private static int _sharedContextReferenceCount;

    public static GL GL { get; private set; }

    public static NVDXInterop NVDXInterop { get; private set; }

    public Format Format { get; }

    public IntPtr DxDeviceFactory { get; }

    public IntPtr DxDeviceHandle { get; }

    public IntPtr DxDeviceContext { get; }

    public IntPtr GlDeviceHandle { get; set; }

    public RenderContext(ContextSettings settings)
    {
        IDXGIFactory2* factory;
        ID3D11Device* device;
        ID3D11DeviceContext* devCtx;

        // Factory
        {
            var guid = typeof(IDXGIFactory2).GetTypeInfo().GUID;
            DXGI.GetApi(null).CreateDXGIFactory2(0, &guid, (void**)&factory);
        }

        // Device
        {
            var flags = CreateDeviceFlag.BgraSupport | CreateDeviceFlag.VideoSupport;
            D3D11.GetApi(null).CreateDevice(null, D3DDriverType.Hardware, 0, Convert.ToUInt32(flags), null, 0, D3D11.SdkVersion, &device, null, &devCtx);
        }

        DxDeviceFactory = (IntPtr)factory;
        DxDeviceHandle = (IntPtr)device;
        DxDeviceContext = (IntPtr)devCtx;

        CreateSharedOpenGLContext(settings);
        GlDeviceHandle = NVDXInterop.DxopenDevice(device);
    }

    public static IntPtr GetProcAddress(string name)
    {
        return GL.Context.GetProcAddress(name);
    }

    private void CreateSharedOpenGLContext(ContextSettings settings)
    {
        if (_sharedContextSettings == null)
        {
            WindowOptions options = WindowOptions.Default;

            options.WindowState = WindowState.Minimized;
            options.IsVisible = false;
            options.API = new GraphicsAPI
            {
                API = ContextAPI.OpenGL,
                Profile = settings.GraphicsProfile,
                Version = new APIVersion(settings.MajorVersion, settings.MinorVersion),
                Flags = settings.GraphicsContextFlags,
            };

            var window = Silk.NET.Windowing.Window.Create(options);
            window.Initialize();
            GL = window.CreateOpenGL();
            NVDXInterop = new(GL.Context);

            _sharedContextSettings = settings;
        }

        Interlocked.Increment(ref _sharedContextReferenceCount);
    }
}
